/*
 * LeetCode 389: Find the Difference (Template for variations 17-41)
 * 
 * Problem: You are given two strings s and t. String t is generated by random shuffling 
 * string s and then add one more letter at a random position. Return the letter that was added to t.
 * 
 * Examples:
 * Input: s = "abcd", t = "abcde"
 * Output: "e"
 * 
 * Input: s = "", t = "y"
 * Output: "y"
 * 
 * Companies: Amazon, Google
 * Difficulty: Easy
 * Pattern: Hash Table, Bit Manipulation, Math
 */

#include <iostream>
#include <string>
#include <unordered_map>
#include <array>
#include <chrono>

class Solution {
public:
    // Approach 1: Hash Map
    // Time: O(n), Space: O(1) for ASCII
    char findTheDifference(std::string s, std::string t) {
        std::unordered_map<char, int> charCount;
        
        // Count characters in s
        for (char c : s) {
            charCount[c]++;
        }
        
        // Subtract characters in t
        for (char c : t) {
            charCount[c]--;
            if (charCount[c] < 0) {
                return c;
            }
        }
        
        return '\0'; // Should never reach here
    }
    
    // Approach 2: Array-based counting
    // Time: O(n), Space: O(1)
    char findTheDifferenceArray(std::string s, std::string t) {
        std::array<int, 26> count = {0};
        
        for (char c : s) {
            count[c - 'a']++;
        }
        
        for (char c : t) {
            count[c - 'a']--;
            if (count[c - 'a'] < 0) {
                return c;
            }
        }
        
        return '\0';
    }
    
    // Approach 3: XOR (Bit Manipulation)
    // Time: O(n), Space: O(1)
    char findTheDifferenceXOR(std::string s, std::string t) {
        char result = 0;
        
        for (char c : s) {
            result ^= c;
        }
        
        for (char c : t) {
            result ^= c;
        }
        
        return result;
    }
    
    // Approach 4: Sum difference
    // Time: O(n), Space: O(1)
    char findTheDifferenceSum(std::string s, std::string t) {
        int sumS = 0, sumT = 0;
        
        for (char c : s) {
            sumS += c;
        }
        
        for (char c : t) {
            sumT += c;
        }
        
        return sumT - sumS;
    }
};

/*
 * NOTE: This template can be adapted for problems 17-41 by:
 * 
 * 1. Changing the problem statement (find different elements, patterns, etc.)
 * 2. Modifying input types (arrays vs strings, different data types)
 * 3. Adjusting the counting/comparison logic
 * 4. Adding complexity with multiple differences or constraints
 * 
 * Examples of variations:
 * - Find the Difference II: Multiple differences
 * - Find the Town Judge: Graph theory with hash tables
 * - Find the Celebrity: Social network problem using hash maps
 * - Find All Numbers Disappeared: Array problems with hash sets
 * 
 * Each variation would follow similar hash table optimization principles:
 * - Use appropriate data structure (map vs set vs array)
 * - Consider space-time tradeoffs
 * - Apply mathematical properties (XOR, sum differences)
 * - Handle edge cases properly
 */

// Test functions
void testFindDifference() {
    Solution solution;
    
    // Test case 1
    std::string s1 = "abcd", t1 = "abcde";
    std::cout << "Test 1 - s: \"" << s1 << "\", t: \"" << t1 << "\" -> " 
              << solution.findTheDifference(s1, t1) << " (expected: e)" << std::endl;
    
    // Test case 2
    std::string s2 = "", t2 = "y";
    std::cout << "Test 2 - s: \"" << s2 << "\", t: \"" << t2 << "\" -> " 
              << solution.findTheDifference(s2, t2) << " (expected: y)" << std::endl;
    
    // Verify all approaches give same result
    std::string s3 = "hello", t3 = "helloo";
    std::cout << "\nCorrectness verification for s=\"" << s3 << "\", t=\"" << t3 << "\":" << std::endl;
    std::cout << "Hash Map: " << solution.findTheDifference(s3, t3) << std::endl;
    std::cout << "Array: " << solution.findTheDifferenceArray(s3, t3) << std::endl;
    std::cout << "XOR: " << solution.findTheDifferenceXOR(s3, t3) << std::endl;
    std::cout << "Sum: " << solution.findTheDifferenceSum(s3, t3) << std::endl;
}

int main() {
    testFindDifference();
    return 0;
}